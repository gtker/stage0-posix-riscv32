## Copyright (C) 2021 Andrius Å tikonas
## This file is part of stage0.
##
## stage0 is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## stage0 is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with stage0.  If not, see <http://www.gnu.org/licenses/>.

## ELF Header

# :ELF_base
7F 45 4C 46        ## e_ident[EI_MAG0-3] ELF's magic number

01                 ## e_ident[EI_CLASS] Indicating 32 bit
01                 ## e_ident[EI_DATA] Indicating little endianness
01                 ## e_ident[EI_VERSION] Indicating original elf

03                 ## e_ident[EI_OSABI] Set at 3 because FreeBSD is strict
00                 ## e_ident[EI_ABIVERSION] Set at 0 because none cares

00 00 00 00 00 00 00 ## e_ident[EI_PAD]
02 00              ## e_type Indicating Executable
F3 00              ## e_machine Indicating RISC-V
01 00 00 00        ## e_version Indicating original elf

54 00 60 00        ## e_entry Address of the entry point (Number of bytes this header is + Base Address)
34 00 00 00        ## e_phoff Address of program header table
00 00 00 00        ## e_shoff Address of section header table

00 00 00 00        ## e_flags
34 00              ## e_ehsize Indicating our 52 Byte header

20 00              ## e_phentsize size of a program header table
01 00              ## e_phnum number of entries in program table

00 00              ## e_shentsize size of a section header table
00 00              ## e_shnum number of entries in section table

00 00              ## e_shstrndx index of the section names

## Program Header
# :ELF_program_headers
01 00 00 00        ## ph_type: PT-LOAD = 1
00 00 00 00        ## p_offset

00 00 60 00        # ph_vaddr
00 00 60 00        # ph_physaddr

7A 03 00 00        # ph_filesz
7A 03 00 00        # ph_memsz

07 00 00 00        ## ph_flags: PF-X|PF-W|PF-R = 7
01 00 00 00        ## ph_align

; Our main function
# :_start ; (0x0600054)

# Register use:
# s2: input fd
# s4: command_done
# s6: malloc pointer

    03 26 81 00     # RD_A2 RS1_SP !8 LW                ; Input file name
    13 07 00 00     # RD_A4 MV                          ; Initialize register (set *rusage = NULL in waitid)

    63 16 06 00     # RS1_A2 @_start_out BNEZ           ; Use input file if specified
                    # +12B

    # Else use kaem.run
    17 06 00 00     # RD_A2 ~default_file AUIPC         ; load address of default_file
    13 06 86 2E     # RD_A2 RS1_A2 !default_file ADDI   ; into register a2
                    # +744B

# :_start_out ; (0x0600064)

    # Open input file and store FD in s2
    93 08 80 03     # RD_A7 !56 ADDI                    ; sys_openat
    13 05 C0 F9     # RD_A0 !-100 ADDI                  ; AT_FDCWD
    93 05 06 00     # RD_A1 RS1_A2 MV                   ; file name
    13 06 00 00     # RD_A2 ADDI                        ; read only
    73 00 00 00     # ECALL                             ; syscall
    63 40 05 2C     # RS1_A0 @Fail BLTZ                 ; Error opening file
                    # +704B
    13 09 05 00     # RD_S2 RS1_A0 MV                   ; Save fd in for later

    # Prepare heap memory
    93 08 60 0D     # RD_A7 !214 ADDI                   ; sys_brk
    13 05 00 00     # RD_A0 MV                          ; Get current brk
    73 00 00 00     # ECALL                             ; syscall
    13 0B 05 00     # RD_S6 RS1_A0 MV                   ; Set our malloc pointer

# Using a1 for tokens and a2 for tokens[i]
# :main_loop ; (0x0600090)
    13 05 10 00     # RD_A0 !1 ADDI                     ; 256 * sizeof(char*)
    13 15 B5 00     # RD_A0 RS1_A0 RS2_X11 SLLI         ; 2048 = 1 << 11
    EF 00 00 1F     # RD_RA $malloc JAL                 ; allocate space
                    # +496B
    93 05 05 00     # RD_A1 RS1_A0 MV                   ; set tokens pointer
    13 06 05 00     # RD_A2 RS1_A0 MV                   ; set tokens[i] pointer (i=0)

    13 0A 00 00     # RD_S4 MV                          ; command_done = 0

# :collect_command ; (0x06000A8)
    EF 00 C0 0D     # RD_RA $collect_token JAL          ; Get another token
                    # +220B
    63 06 05 00     # RS1_A0 @collect_command_comment BEQZ ; if NULL == result then it is a comment, don't store
                    # +12B

    23 20 A6 00     # RS1_A2 RS2_A0 SW                  ; tokens[i] = result
    13 06 46 00     # RD_A2 RS1_A2 !4 ADDI              ; i = i + 1 (sizeof(char*) = 4)

# :collect_command_comment ; (0x06000B8)
    E3 08 0A FE     # RS1_S4 @collect_command BEQZ      ; keep looping if 0 == command_done
                    # -16B

    # Deal with line comments
    E3 8A C5 FC     # RS1_A1 RS2_A2 @main_loop BEQ      ; keep looping if comment
                    # -44B

    EF 00 40 07     # RD_RA $print_command JAL          ; print the command
                    # +116B
    03 A5 05 00     # RD_A0 RS1_A1 LW                   ; program = tokens[0]
    63 08 05 26     # RS1_A0 @Fail BEQZ                 ; Error, no program
                    # +624B

    13 01 C1 FF     # RD_SP RS1_SP !-4 ADDI             ; allocate stack
    23 20 B1 00     # RS1_SP RS2_A1 SW                  ; protect tokens

    93 08 C0 0D     # RD_A7 !220 ADDI                   ; sys_clone
    13 05 10 01     # RD_A0 !17 ADDI                    ; SIGCHLD flag
    93 05 00 00     # RD_A1 MV                          ; Child uses duplicate of parent's stack
    73 00 00 00     # ECALL                             ; syscall

    83 25 01 00     # RD_A1 RS1_SP LW                   ; restore tokens
    13 01 41 00     # RD_SP RS1_SP !4 ADDI              ; deallocate stack

    63 46 05 24     # RS1_A0 @Fail BLTZ                 ; if f == -1 no child was created
                    # +588B
    63 1A 05 00     # RS1_A0 @collect_command_parent BNEZ ; if f == 0 it is child
                    # +20B

    # Deal with child case
    93 08 D0 0D     # RD_A7 !221 ADDI                   ; sys_execve
    03 A5 05 00     # RD_A0 RS1_A1 LW                   ; program = tokens[0]
    73 00 00 00     # ECALL                             ; execve(program, tokens)
    EF 00 80 23     # RD_RA $Fail JAL                   ; Exit with an error
                    # +568B

# :collect_command_parent ; (0x0600104)
    93 08 F0 05     # RD_A7 !95 ADDI                    ; sys_waitid
    13 05 00 00     # RD_A0 MV                          ; set idtype = P_ALL
    17 06 00 00     # RD_A2 ~info AUIPC                 ; a2 = siginfo_t &info
    13 06 A6 26     # RD_A2 RS1_A2 !info ADDI
                    # +618B
    93 06 40 00     # RD_A3 !4 MV                       ; set *options = WEXITED
    73 00 00 00     # ECALL                             ; syscall

    # Check if child exited
    03 26 46 01     # RD_A2 RS1_A2 !20 LW               ; status = info->si_status
    E3 08 06 F6     # RS1_A2 @main_loop BEQZ            ; Loop if 0 == status
                    # -144B

# :abort ; (0x0600124)
    17 05 00 00     # RD_A0 ~hard AUIPC                 ; Get error string
    13 05 25 23     # RD_A0 RS1_A0 !hard ADDI           ; Get error string
                    # +562B
    EF 00 80 18     # RD_RA $File_Print JAL             ; Print it
                    # +392B
    6F 00 80 20     # $Fail JAL                         ; Exit with failure
                    # +520B


# print_command function
# Receives tokens[j] in a1 and tokens[i] in a2
# Modifies a0
# :print_command ; (0x0600134)
    13 01 41 FF     # RD_SP RS1_SP !-12 ADDI            ; allocate stack
    23 20 11 00     # RS1_SP RS2_RA SW                  ; protect ra
    23 22 B1 00     # RS1_SP RS2_A1 @4 SW               ; protect a1
    23 24 C1 00     # RS1_SP RS2_A2 @8 SW               ; protect a2

    17 05 00 00     # RD_A0 ~prefix AUIPC               ; Get prefix " +> "
    13 05 D5 20     # RD_A0 RS1_A0 !prefix ADDI         ; Get prefix " +> "
                    # +525B
    EF 00 80 16     # RD_RA $File_Print JAL             ; print it
                    # +360B

# :print_command_loop ; (0x0600150)
    03 A5 05 00     # RD_A0 RS1_A1 LW                   ; get tokens[j]
    EF 00 00 16     # RD_RA $File_Print JAL             ; print it
                    # +352B
    93 85 45 00     # RD_A1 RS1_A1 !4 ADDI              ; j = j + 1
    13 05 00 02     # RD_A0 !32 ADDI                    ; a0 = ' '
    EF 00 40 19     # RD_RA $fputc JAL                  ; print it
                    # +404B
    E3 96 C5 FE     # RS1_A1 RS2_A2 @print_command_loop BNE ; continue if j < i, otherwise keep looping
                    # -20B

    13 05 A0 00     # RD_A0 !10 ADDI                    ; a0 = '\n'
    EF 00 80 18     # RD_RA $fputc JAL                  ; print it
                    # +392B

    83 20 01 00     # RD_RA RS1_SP LW                   ; restore ra
    83 25 41 00     # RD_A1 RS1_SP !4 LW                ; restore a1
    03 26 81 00     # RD_A2 RS1_SP !8 LW                ; restore a2
    13 01 C1 00     # RD_SP RS1_SP !12 ADDI             ; deallocate stack
    67 80 00 00     # RS1_RA JALR                       ; return


# collect_token function
# Receives nothing
# Overwrites a0
# Uses a0 as c, a1 as token and a2 as token[i]
# :collect_token ; (0x0600184)
    13 01 41 FF     # RD_SP RS1_SP !-12 ADDI            ; allocate stack
    23 20 11 00     # RS1_SP RS2_RA SW                  ; protect ra
    23 22 B1 00     # RS1_SP RS2_A1 @4 SW               ; protect a1
    23 24 C1 00     # RS1_SP RS2_A2 @8 SW               ; protect a2

    37 15 00 00     # RD_A0 ~4096 LUI                   ; 4096 * sizeof(char)
    EF 00 00 0F     # RD_RA $malloc JAL                 ; allocate space
                    # +240B
    93 05 05 00     # RD_A1 RS1_A0 MV                   ; token = malloc(max_string)
    13 06 05 00     # RD_A2 RS1_A0 MV                   ; i = 0; set token[i]

# :collect_token_loop ; (0x06001A4)
    EF 00 40 0A     # RD_RA $fgetc JAL                  ; read character
                    # +164B

    93 02 C0 FF     # RD_T0 !-4 ADDI                    ; if character == EOF
    63 00 55 18     # RS1_A0 RS2_T0 @Done BEQ           ; We are done
                    # +384B

    93 02 00 02     # RD_T0 !32 ADDI                    ; if c == ' '
    63 06 55 04     # RS1_A0 RS2_T0 @collect_token_done BEQ ; Space terminates token
                    # +76B

    93 02 90 00     # RD_T0 !9 ADDI                     ; if c == '\t'
    63 02 55 04     # RS1_A0 RS2_T0 @collect_token_done BEQ ; Tab terminates token
                    # +68B

    93 02 A0 00     # RD_T0 !10 ADDI                    ; continue if c == '\n'
    63 16 55 00     # RS1_A0 RS2_T0 @collect_token_comment BNE ; otherwise check next
                    # +12B

    # newline
    13 0A 10 00     # RD_S4 !1 ADDI                     ; command_done = true
    6F 00 40 03     # $collect_token_done JAL           ; Done with current command
                    # +52B

# :collect_token_comment ; (0x06001D0)
    93 02 30 02     # RD_T0 !35 ADDI                    ; if c == '#'
    63 18 55 00     # RS1_A0 RS2_T0 @collect_token_escape BNE ; otherwise check next
                    # +16B

    # It is a line comment
    EF 00 80 04     # RD_RA $collect_comment JAL        ; Read whole comment
                    # +72B
    13 0A 10 00     # RD_S4 !1 ADDI                     ; command_done = true
    EF 00 00 02     # RD_RA $collect_token_done JAL     ; Done
                    # +32B

# :collect_token_escape ; (0x06001E4)
    93 02 C0 05     # RD_T0 !92 ADDI                    ; if c == '\'
    63 16 55 00     # RS1_A0 RS2_T0 @collect_token_other BNE ; otherwise just store it
                    # +12B

    # Escape character
    EF 00 C0 05     # RD_RA $fgetc JAL                  ; Read the char to drop
                    # +92B
    EF 00 00 01     # RD_RA $collect_token_done JAL     ; We are done
                    # +16B

# :collect_token_other ; (0x06001F4)
    23 00 A6 00     # RS1_A2 RS2_A0 SB                  ; token[i] = c
    13 06 16 00     # RD_A2 RS1_A2 !1 ADDI              ; i = i + 1
    6F F0 9F FA     # $collect_token_loop JAL           ; Read another character
                    # -88B

# :collect_token_done ; (0x0600200)
    63 94 C5 00     # RS1_A1 RS2_A2 @collect_token_good BNE ; return the token unless
                    # +8B
    93 05 00 00     # RD_A1 MV                          ; i == 0, then token = NULL

# :collect_token_good ; (0x0600208)
    13 85 05 00     # RD_A0 RS1_A1 MV                   ; Return token
    83 20 01 00     # RD_RA RS1_SP LW                   ; restore ra
    83 25 41 00     # RD_A1 RS1_SP !4 LW                ; restore a1
    03 26 81 00     # RD_A2 RS1_SP !8 LW                ; restore a2
    13 01 C1 00     # RD_SP RS1_SP !12 ADDI             ; Deallocate stack
    67 80 00 00     # RS1_RA JALR                       ; return


# collect_comment function
# Receives nothing
# Modifies a0
# uses a0 as c
# Just throws away everything it reads
# :collect_comment ; (0x0600220)
    13 01 C1 FF     # RD_SP RS1_SP !-4 ADDI             ; allocate stack
    23 20 11 00     # RS1_SP RS2_RA SW                  ; protect ra

    EF 00 00 02     # RD_RA $fgetc JAL                  ; c = fgetc(input)
                    # +32B
    93 02 C0 FF     # RD_T0 !-4 ADDI                    ; if c == EOF
    63 04 55 10     # RS1_A0 RS2_T0 @Fail BEQ           ; Abort
                    # +264B

    93 02 A0 00     # RD_T0 !10 ADDI                    ; if c == '\n'
    E3 14 55 FE     # RS1_A0 RS2_T0 @collect_comment BNE ; loop
                    # -24B

    83 20 01 00     # RD_RA RS1_SP LW                   ; restore ra
    13 01 41 00     # RD_SP RS1_SP !4 ADDI              ; deallocate stack
    67 80 00 00     # RS1_RA JALR                       ; return


# fgetc function ; (0x0600248)
# Loads FILE* from s2
# Returns -4 (EOF) or char in a0
# :fgetc
    13 01 41 FF     # RD_SP RS1_SP !-12 ADDI            ; allocate stack
    23 22 B1 00     # RS1_SP RS2_A1 @4 SW               ; protect a1
    23 24 C1 00     # RS1_SP RS2_A2 @8 SW               ; protect a2

    93 08 F0 03     # RD_A7 !63 ADDI                    ; sys_read
    93 05 01 00     # RD_A1 RS1_SP MV                   ; Get stack address
    13 05 09 00     # RD_A0 RS1_S2 MV                   ; read from input file
    13 06 10 00     # RD_A2 !1 ADDI                     ; read 1 character
    73 00 00 00     # ECALL                             ; syscall

    63 16 05 00     # RS1_A0 @fgetc_done BNEZ           ; Check if nothing was read
                    # +12B

# :fgetc_fail ; (0x060026C)
    93 02 C0 FF     # RD_T0 !-4 ADDI                    ; Use -4 as EOF
    23 80 55 00     # RS1_A1 RS2_T0 SB                  ; Store EOF in *a1

# :fgetc_done ; (0x0600274)
    03 85 05 00     # RD_A0 RS1_A1 LB                   ; return char in a0
    83 25 41 00     # RD_A1 RS1_SP !4 LW                ; restore a1
    03 26 81 00     # RD_A2 RS1_SP !8 LW                ; restore a2
    13 01 C1 00     # RD_SP RS1_SP !12 ADDI             ; deallocate stack
    67 80 00 00     # RS1_RA JALR                       ; return


# Malloc isn't actually required if the program being built fits in the initial memory
# However, it doesn't take much to add it.
# Requires MALLOC pointer to be initialized and a0 to have the number of desired bytes

# :malloc ; (0x0600288)
    13 01 C1 FF     # RD_SP RS1_SP !-4 ADDI             ; allocate stack
    23 20 B1 00     # RS1_SP RS2_A1 SW                  ; protect a1

    93 05 0B 00     # RD_A1 RS1_S6 MV                   ; Store the current pointer
    33 05 65 01     # RD_A0 RS1_A0 RS2_S6 ADD           ; Request the number of desired bytes
    93 08 60 0D     # RD_A7 !214 ADDI                   ; sys_brk
    73 00 00 00     # ECALL                             ; syscall
    13 0B 05 00     # RD_S6 RS1_A0 MV                   ; Set our malloc pointer
    13 85 05 00     # RD_A0 RS1_A1 MV                   ; Return the pointer

    83 25 01 00     # RD_A1 RS1_SP LW                   ; restore a1
    13 01 41 00     # RD_SP RS1_SP !4 ADDI              ; deallocate stack
    67 80 00 00     # RS1_RA JALR                       ; return

# File_Print function
# Receives CHAR* in a0
# calls fputc for every non-null char
# :File_Print ; (0x06002B4)
    13 01 41 FF     # RD_SP RS1_SP !-12 ADDI            ; allocate stack
    23 20 11 00     # RS1_SP RS2_RA SW                  ; protect ra
    23 22 B1 00     # RS1_SP RS2_A1 @4 SW               ; protect a1
    23 24 C1 00     # RS1_SP RS2_A2 @8 SW               ; protect a2
    93 05 05 00     # RD_A1 RS1_A0 MV                   ; protect a0

    63 0C 05 00     # RS1_A0 @File_Print_Done BEQZ      ; Protect against nulls
                    # +24B

# :File_Print_Loop ; (0x06002CC)
    03 C5 05 00     # RD_A0 RS1_A1 LBU                  ; Read byte
    63 08 05 00     # RS1_A0 @File_Print_Done BEQZ      ; Stop at NULL
                    # +16B

    EF 00 00 02     # RD_RA $fputc JAL                  ; print it
                    # +32B
    93 85 15 00     # RD_A1 RS1_A1 !1 ADDI              ; S = S + 1
    6F F0 1F FF     # $File_Print_Loop JAL              ; Keep printing
                    # -16B

# :File_Print_Done ; (0x06002E0)
    83 20 01 00     # RD_RA RS1_SP LW                   ; restore ra
    83 25 41 00     # RD_A1 RS1_SP !4 LW                ; restore a1
    03 26 81 00     # RD_A2 RS1_SP !8 LW                ; restore a2
    13 01 C1 00     # RD_SP RS1_SP !12 ADDI             ; deallocate stack
    67 80 00 00     # RS1_RA JALR                       ; return

# fputc function
# receives CHAR in a0 and load FILE* from stdout
# writes char and returns
# :fputc ; (0x06002F4)
    13 01 41 FF     # RD_SP RS1_SP !-12 ADDI            ; allocate stack
    23 20 A1 00     # RS1_SP RS2_A0 SW                  ; protect a0
    23 22 B1 00     # RS1_SP RS2_A1 @4 SW               ; protect a1
    23 24 C1 00     # RS1_SP RS2_A2 @8 SW               ; protect a2

    93 08 00 04     # RD_A7 !64 ADDI                    ; sys_write
    13 05 10 00     # RD_A0 !1 ADDI                     ; write to stdout
    93 05 01 00     # RD_A1 RS1_SP MV                   ; Get stack address
    13 06 10 00     # RD_A2 !1 ADDI                     ; write 1 character
    73 00 00 00     # ECALL                             ; syscall

    03 25 01 00     # RD_A0 RS1_SP LW                   ; restore a0
    83 25 41 00     # RD_A1 RS1_SP !4 LW                ; restore a1
    03 26 81 00     # RD_A2 RS1_SP !8 LW                ; restore a2
    13 01 C1 00     # RD_SP RS1_SP !12 ADDI             ; deallocate stack
    67 80 00 00     # RS1_RA JALR                       ; return

# :Done ; (0x060032C)
    # Terminate program with 0 return code
    93 08 D0 05     # RD_A7 !93 ADDI                    ; sys_exit
    13 05 00 00     # RD_A0 MV                          ; Return code 0
    73 00 00 00     # ECALL                             ; syscall

# :Fail ; (0x0600338)
    # Terminate program with 1 return code
    93 08 D0 05     # RD_A7 !93 ADDI                    ; sys_exit
    13 05 10 00     # RD_A0 !1 ADDI                     ; Return code 1
    73 00 00 00     # ECALL                             ; syscall
# PROGRAM END

# :default_file ; (0x0600344)
    6B 61 65 6D 2E 72 69 73 63 76 33 32 00                          ; kaem.riscv32
# :prefix ; (0x0600351)
    20 2B 3E 20 00                                      ; " +> "
# :hard ; (0x0600356)
    53 75 62 70 72 6F 63 65 73 73 20 65 72 72 6F 72 0A  ; "Subprocess error"
    41 42 4F 52 54 49 4E 47 20 48 41 52 44 0A           ; "ABORTING HARD"
    00
# :info ; (0x0600376)
    00 00 00 00

# :ELF_end ; (0x060037A)
